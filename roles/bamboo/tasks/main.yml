---
- name: Install prerequisite packages
  ansible.builtin.include_tasks: "{{ ansible_os_family }}.yml"

- name: Create system user
  become: true
  ansible.builtin.user:
    name: "{{ bamboo_system_user }}"
    system: true
    state: present
    create_home: false

- name: Create installation directory
  become: true
  ansible.builtin.file:
    path: "{{ bamboo_home_directory }}"
    state: directory
    owner: "{{ bamboo_system_user }}"
    group: "{{ bamboo_system_user }}"

- name: Create database users
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ _db.username }}"
    password: "{{ _db.password }}"
    conn_limit: "-1"
  loop: "{{ bamboo_database | dict2items | map(attribute='value') | list }}"
  loop_control:
    loop_var: _db
  when: _db.enabled | bool
  no_log: true

- name: Create databases
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ _db.name }}"
    owner: "{{ _db.username }}"
    encoding: UTF-8
    lc_collate: "{{ bamboo_locale }}"
    lc_ctype: "{{ bamboo_locale }}"
    template: template0
  loop: "{{ bamboo_database | dict2items | map(attribute='value') | list }}"
  loop_control:
    loop_var: _db
  when: _db.enabled | bool
  no_log: true

- name: Grant privs on db
  become: true
  become_user: postgres
  community.postgresql.postgresql_privs:
    database: "{{ _db.name }}"
    role: "{{ _db.username }}"
    state: present
    privs: ALL
    type: database
  loop: "{{ bamboo_database | dict2items | map(attribute='value') | list }}"
  loop_control:
    loop_var: _db
  when: _db.enabled | bool
  no_log: true

- name: Unpack Bamboo to installation direcotory
  become: true
  ansible.builtin.unarchive:
    src: "{{ bamboo_base_url }}/atlassian-bamboo-{{ bamboo_version.major }}.{{ bamboo_version.minor }}.{{ bamboo_version.patch }}.tar.gz"
    dest: "{{ bamboo_home_directory }}"
    creates: "{{ bamboo_home_directory }}/bamboo.sh"
    owner: "{{ bamboo_system_user }}"
    group: "{{ bamboo_system_user }}"
    remote_src: true
    extra_opts:
      - --strip-components=1

- name: Create JDK dest directory
  become: true
  ansible.builtin.file:
    path: "{{ bamboo_home_directory }}/jdk"
    owner: "{{ bamboo_system_user }}"
    group: "{{ bamboo_system_user }}"
    mode: 0770
    state: directory

- name: Unpack JDK to installation directory
  become: true
  ansible.builtin.unarchive:
    src: "{{ temurin_base_url }}/temurin{{ temurin_version.major }}-binaries/releases/download/jdk-{{ temurin_version.major }}.{{ temurin_version.minor }}.{{ temurin_version.patch }}%2B{{ temurin_version.build }}/OpenJDK11U-jdk_x64_linux_hotspot_{{ temurin_version.major }}.{{ temurin_version.minor }}.{{ temurin_version.patch }}_{{ temurin_version.build }}.tar.gz"
    dest: "{{ bamboo_home_directory }}/jdk"
    creates: "{{ bamboo_home_directory }}/jdk/release"
    remote_src: true
    owner: "{{ bamboo_system_user }}"
    group: "{{ bamboo_system_user }}"
    extra_opts:
      - "--strip-components=1"

- name: Check if bamboo.cfg.xml already exists
  ansible.builtin.stat:
    path: "{{ bamboo_home_directory }}/bamboo.cfg.xml"
  register: _bamboo_cfg

- name: Set skip configuration if bamboo.cfg.xml already exists
  ansible.builtin.set_fact:
    bamboo_skip_config: true
  when: _bamboo_cfg.stat.exists

- name: Configure Bamboo
  become: true
  become_user: "{{ bamboo_system_user }}"
  ansible.builtin.template:
    src: "{{ _template.name }}.j2"
    dest: "{{ bamboo_home_directory }}{{ _template.dest }}/{{ _template.name }}"
    owner: "{{ bamboo_system_user }}"
    group: "{{ bamboo_system_user }}"
  loop:
    - name: bamboo.cfg.xml
      dest: "/"
      disabled: "{{ bamboo_skip_config }}"
    - name: server.xml
      dest: "/conf"
      disabled: false
    - name: seraph-config.xml
      dest: "/atlassian-bamboo/WEB-INF/classes"
      disabled: false
    - name: bamboo-init.properties
      dest: "/atlassian-bamboo/WEB-INF/classes"
      disabled: false
    - name: postgresql.properties
      dest: "/atlassian-bamboo/WEB-INF/classes/database-defaults"
      disabled: false
    - name: unattended-setup.properties
      dest: "/"
      disabled: "{{ false if (bamboo_version.major >= 8 and bamboo_version.minor >= 1) else true }}"
  loop_control:
    label: "{{ _template.name }}"
    loop_var: _template
  notify: restart bamboo
  when: not _template.disabled

- name: Update license if required
  become: true
  become_user: "{{ bamboo_system_user }}"
  community.general.xml:
    path: "{{ bamboo_home_directory }}/bamboo.cfg.xml"
    xpath: /application-configuration/properties/property[@name="license.string"]
    value: "{{ bamboo_license | replace('\n', ' ') }}"
  notify: restart bamboo
  no_log: true
  when:
    - bamboo_version.major == 8 and bamboo_version.minor == 1
    - _bamboo_cfg.stat.exists

- name: Create the Bamboo systemd service
  become: true
  ansible.builtin.template:
    src: "bamboo.service.j2"
    dest: "/lib/systemd/system/bamboo.service"
    owner: root
    group: root
    mode: 444
    seuser: system_u
    serole: object_r
    setype: systemd_unit_file_t

- name: Enable the Bamboo systemd service
  become: true
  ansible.builtin.systemd:
    name: bamboo
    state: started
    daemon_reload: true
    enabled: true
